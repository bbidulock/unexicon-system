#!/bin/bash
#
# /etc/NetworkManager/dispatcher.d/37-nis
# /etc/ppp/ip-up.d/37-nis.sh
# /etc/ppp/ip-down.d/37-nis.sh
# /etc/ppp/ipv6-up.d/37-nis.sh
# /etc/ppp/ipv6-down.d/37-nis.sh
# /usr/lib/dhcpcd/dhcpcd-hooks/37-nis
#
# This script is for interfaces being established by NetworkManager
# and those that are being established by PPTPD or PPPOED.  We need
# to add these interfaces to the routing daemon but we restrict them
# to having routing information for the unexicon subnetwork of
# 10.55.7.0/24 for PPTPD.  NetworkManager establishes the normal
# interfaces and PPTP or PPPOE client associations, but PPTPD and
# PPPOED establish the server associations.
#

unx_name=ypbind
unx_unit=ypbind
unx_unit_dir=/run/nm-unexicon/$unx_unit
[ -d $unx_unit_dir ] || mkdir -p -- $unx_unit_dir

case "$0" in
(./*|../*|[^./]*)   unx_dispatcher="$(pwd)/$0" ;;
(*)		    unx_dispatcher="$0" ;;
esac

unx_prog=$(basename $0)
[ "$unx_prog" != 'dhcpcd-run-hooks' ] || unx_prog=dhcpcd

if [ "$unx_prog" != dhcpcd ]; then
syslog ()
{
	local level="$1"
	[ -n "$level" ] && shift
	if [ -n "$*" ]; then
		if type logger >/dev/null 2>&1; then
			logger -i -t $unx_prog -p daemon.${level:-info} "${interface:+$interface: }$*"
		fi
	fi
}
else
	syslog debug "Running dhcpcd-hook for unit ${unx_unit}..."
fi

unx_unit_set_domainname ()
{
	local domainname dfiles names=
	dfiles=$(find $unx_unit_dir -name '*_domain' 2>/dev/null)
	[ -z "$dfiles" ] || names="$(cat $dfiles|awk '{if($0&&!($0 in seen)){seen[$0]=1;print$0}}')"
	domainname="$(domainname)"
	if [ -n "$domainname" -a "$domainname" != '(none)' ]; then
		case " $domainname " in *" $names "*) return ;; esac
	fi
	domainname="$(echo "$names"|awk '{print$1}')"
	syslog info "Setting NIS/YP domain name to '$domainname'"
	domainname "$domainname"
}

unx_unit_rebuild_config ()
{
	local file stemp dtemp ssave dsave sconf dconf sfiles dfiles
	syslog debug "Rebuilding configuration."
	sconf=/etc/yp.conf
	ssave="$unx_unit_dir/$(basename $sconf).save"
	sfiles=$(find $unx_unit_dir -name '*_servers' 2>/dev/null)
	dconf=/etc/nisdomainname
	dsave="$unx_init_dir/$(basename $dconf).save"
	dfiles=$(find $unx_unit_dir -name '*_domain' 2>/dev/null)
	if [ -n "$sfiles$dfiles" ]; then
		syslog debug "Defined servers are $sfiles"
		if [ ! -e $ssave ]; then
			if [ -e $sconf ]; then
				cp -pf -- $sconf $ssave
				rm -f -- $sconf
			else
				touch $ssave
			fi
		fi
		stemp=$(mktemp "$unx_unit_dir/$(basename $sconf).XXXXXX") || return
		chmod --reference=$ssave $stemp
		chown --reference=$ssave $stemp
		{
			cat<<-EOF
			# $sconf
			#
			# $(basename $sconf) -- ${unx_unit} configuration file
			#
			# Generated by ${unx_unit} hook script.
			# Any manual changes will be lost at next network event.
			#
			EOF
			if [ -z "$sfiles" ]; then
				cat<<-'EOF'
				
				broadcast
				EOF
			else
				cat $sfiles|awk '{if($0&&!($0 in seen)){seen[$0]=1;print$0}}'
			fi
		}>$stemp
		syslog debug "Define domains are $dfiles"
		if [ ! -e $dsave ]; then
			if [ -e $dconf ]; then
				cp -pf -- $dconf $dsave
				rm -f -- $dconf
			else
				touch $dsave
			fi
		fi
		dtemp=$(mktemp "$unx_unit_dir/$(basename $dconf).XXXXXX") || return
		chmod --reference=$dsave $dtemp
		chown --reference=$dsave $dtemp
		{
			cat<<-EOF
			# $dconf
			#
			# $(basename $dconf) -- ${unx_unit} configuration file
			#
			# Generated by ${unx_unit} hook script.
			# Any manual changes will be lost at next network event.
			#
			EOF
			cat $dfiles|awk '{if($0&&!($0 in seen)){seen[$0]=1;print"NISDOMAINNAME=\""$0"\""}}'
		}>$dtemp
		if [ -e $dconf ]; then
			if ! diff $dtemp $dconf &>/dev/null; then
				cp -pf -- $dtemp $dconf
				unx_unit_set_domainname || :
			fi
		else
			cp -pf -- $dtemp $dconf
			unx_unit_set_domainname || :
		fi
		rm -f -- $dtemp
		if [ -e $sconf ]; then
			if ! diff $stemp $sconf &>/dev/null; then
				cp -pf -- $stemp $sconf
				systemctl --no-block try-reload-or-restart unexicon-$unx_unit unexicon-autofs || :
			fi
		else
			cp -pf -- $stemp $sconf
			systemctl --no-block --now --runtime enable unexicon-$unx_unit unexicon-autofs || :
		fi
		rm -f -- $stemp
	else
		syslog debug "No defined server or domain, shutting down"
		systemctl --no-block --now disable unexicon-autofs unexicon-$unx_unit || :
		unx_unit_set_domainname || :
		if [ -s $dsave ]; then
			cp -pf -- $dsave $dconf
		else
			rm -f -- $dconf
		fi
		rm -f -- $dsave
		if [ -s $ssave ]; then
			cp -pf -- $ssave $sconf
		else
			rm -f -- $sconf
		fi
		rm -f -- $ssave
	fi
	systemctl daemon-reload
}

unx_unit_remove ()
{
	local f existing=
	for f in $unx_unit_dir/${1}_*; do
		[ -e $f ] || continue
		existing=yes
		break
	done
	if [ -n "$existing" ]; then
		rm -f -- $unx_unit_dir/${1}_*
		unx_unit_rebuild_config
	fi
}

unx_unit_add ()
{
	local domain server servers
	cat /dev/null >$unx_unit_dir/${1}_domain
	cat /dev/null >$unx_unit_dir/${1}_servers
	if [ -n "$2$3" ]; then
		servers=$(echo "$3"|sed 's/,/ /g')
		if [ -n "$2" ]; then
			domain="$2"
			echo "$domain" >>$unx_unit_dir/${1}_domain
			if [ -n "${servers## *}" ]; then
				for server in $servers; do
					echo "domain $domain server $server" >$unx_unit_dir/${1}_servers
				done
			else
				echo "domain $domain broadcast" >$unx_unit_dir/${1}_servers
			fi
		else
			for server in $servers; do
				echo "ypserver $server" >>$unx_unit_dir/${1}_servers
			done
		fi
	fi
	if [ -n "$4$5" ]; then
		servers=$(echo "$5"|sed 's/,/ /g')
		if [ -n "$4" ]; then
			domain="$4"
			echo "$domain" >>$unx_unit_dir/${1}_domain
			if [ -n "${servers## *}" ]; then
				for server in $servers; do
					echo "domain $domain server $server" >$unx_unit_dir/${1}_servers
				done
			else
				echo "domain $domain broadcast" >$unx_unit_dir/${1}_servers
			fi
		else
			for server in $servers; do
				echo "ypserver $server" >>$unx_unit_dir/${1}_servers
			done
		fi
	fi
	[ -s $unx_unit_dir/${1}_domain  ] || rm -f $unx_unit_dir/${1}_domain
	[ -s $unx_unit_dir/${1}_servers ] || rm -f $unx_unit_dir/${1}_servers
	unx_unit_rebuild_config
}

unx_unit_nm_add ()
{
	unx_unit_add "$1" "$DHCP4_NISPLUS_DOMAIN" "$DHCP4_NISPLUS_SERVERS" "$DHCP4_NIS_DOMAIN" "$DHCP4_NIS_SERVERS"
}

unx_unit_nm_rmv ()
{
	unx_unit_remove $@
}

unx_unit_nm_cha ()
{
	if [ -n "$DHCP4_NISPLUS_DOMAIN$DHCP4_NISPLUS_SERVERS$DHCP4_NIS_DOMAIN$DHCP4_NIS_SERVERS" ]; then
		unx_unit_nm_add $@
	else
		unx_unit_nm_rmv $@
	fi
}

# Network manager up command
unx_unit_nm_up ()
{
	syslog debug "Responding to NM up command."
	unx_unit_nm_add $@
}

# Network manager down command
unx_unit_nm_down ()
{
	syslog debug "Responding to NM down command."
	unx_unit_nm_rmv $@
}

# Network manager vpn-up command
unx_unit_nm_vpn_up ()
{
	syslog debug "Responding to NM vpn-up command."
	unx_unit_nm_add $@
}

# Network manager vpn-down command
unx_unit_nm_vpn_down ()
{
	syslog debug "Responding to NM vpn-down command."
	unx_unit_nm_rmv $@
}

# Network manager dhcp4-change command
unx_unit_nm_dhcp4_change ()
{
	syslog debug "Responding to NM dhcp4-change command."
	unx_unit_nm_cha $@
}

# Network manager dhcp6-change command
unx_unit_nm_dhcp6_change ()
{
	syslog debug "Responding to NM dhcp6-change command."
	unx_unit_nm_cha $@
}

# Network manager hostname command
unx_unit_nm_hostname ()
{
	syslog debug "Responding to NM hostname command."
	:
}

unx_unit_ppp_add ()
{
	unx_unit_add $@
}

unx_unit_ppp_rmv ()
{
	unx_unit_remove $@
}

# PPP daemon ip-up command
unx_unit_ppp_ip_up ()
{
	:
}

# PPP daemon ip-down command
unx_unit_ppp_ip_down ()
{
	unx_unit_ppp_rmv $@
}

# PPP daemon ipv6-up command
unx_unit_ppp_ipv6_up ()
{
	:
}

# PPP daemon ipv6-down command
unx_unit_ppp_ipv6_down ()
{
	unx_unit_ppp_rmv $@
}

unx_unit_dhcp_add ()
{
	syslog debug "Responding to DHCP add command (reason: $reason)"
	unx_unit_add "$1" "$new_nisplus_domain" "$new_nisplus_servers" "$new_nis_domain" "$new_nis_servers"
}

unx_unit_dhcp_rmv ()
{
	syslog debug "Responding to DHCP rmv command (reason: $reason)"
	unx_unit_remove $@
}

# DHCP client daemon hook command
unx_unit_dhcpcd_hook ()
{
	syslog debug "Executing dhcpcd hook $unx_unit (reason: $reason)"
	case "$reason" in
	(PREINIT|FAIL|RECONFIGURE)
		;;
	(INFORM|INFORM6|BOUND|BOUND6|IPV4LL|STATIC|3RDPARTY|TIMEOUT)
		unx_unit_dhcp_add $interface
		;;
	(RENEW|RENEW6|REBIND|REBIND6|REBOOT|REBOOT6|CARRIER|NOCARRIER|DEPARTED)
		;;
	(EXPIRE|RELEASE|NAK)
		unx_unit_dhcp_rmv $interface
		;;
	(STOP)
		;;
	(DUMP|TEST|ROUTERADVERT)
		;;
	esac
}

# We just put this script in /etc/NetworkManager/dispatcher.d
# and then symbolic link it from /etc/ppp/ip{v6}-{up|down}.d/
# directories.  So, we decide what to do based on how we were
# called.

unx_unit_hook ()
{
	syslog debug "Dispatcher for $unx_unit invoked..."

	case "$unx_dispatcher" in
		(*/dispatcher.d/*)
			syslog debug "Invoked as dispatcher."
			case "$2" in
			(up)		unx_unit_nm_up			$@ ;;
			(down)		unx_unit_nm_down		$@ ;;
			(vpn-up)	unx_unit_nm_vpn_up		$@ ;;
			(vpn-down)	unx_unit_nm_vpn_down		$@ ;;
			(dhcp4-change)	unx_unit_nm_dhcp4_change	$@ ;;
			(dhcp6-change)	unx_unit_nm_dhcp6_change	$@ ;;
			(hostname)	unx_unit_nm_hostname		$@ ;;
			esac
			;;
		(*/ip-up.d/*)		unx_unit_ppp_ip_up		$@ ;;
		(*/ip-down.d/*)		unx_unit_ppp_ip_down		$@ ;;
		(*/ipv6-up.d/*)		unx_unit_ppp_ipv6_up		$@ ;;
		(*/ipv6-down.d/*)	unx_unit_ppp_ipv6_down		$@ ;;
		(*/dhcpcd-run-hooks)	unx_unit_dhcpcd_hook		$@ ;;
	esac

	syslog debug "...done dispatcher for ${unx_unit}."
}

unx_unit_hook $@ || :

