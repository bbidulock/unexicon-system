#!/bin/bash
#
# /etc/NetworkManager/dispatcher.d/35-ntp
# /etc/ppp/ip-up.d/35-ntp.sh
# /etc/ppp/ip-down.d/35-ntp.sh
# /etc/ppp/ipv6-up.d/35-ntp.sh
# /etc/ppp/ipv6-down.d/35-ntp.sh
# /usr/lib/dhcpcd/dhcpcd-hooks/35-ntp
#
# This script is for interfaces being established by NetworkManager
# and those that are being established by PPTPD or PPPOED.  We need
# to add these interfaces to the routing daemon but we restrict them
# to having routing information for the unexicon subnetwork of
# 10.55.7.0/24 for PPTPD.  NetworkManager establishes the normal
# interfaces and PPTP or PPPOE client associations, but PPTPD and
# PPPOED establish the server associations.
#

unx_name=ntpd
unx_unit=ntpd
unx_unit_dir=/run/nm-unexicon/$unx_unit
[ -d $unx_unit_dir ] || mkdir -p -- $unx_unit_dir

case "$0" in
(./*|../*|[^./]*)   unx_dispatcher="$(pwd)/$0" ;;
(*)		    unx_dispatcher="$0" ;;
esac

unx_prog=$(basename $0)
[ "$unx_prog" != 'dhcpcd-run-hooks' ] || unx_prog=dhcpcd

if [ "$unx_prog" != dhcpcd ]; then
syslog ()
{
	local level="$1"
	[ -n "$level" ] && shift
	if [ -n "$*" ]; then
		if type logger >/dev/null 2>&1; then
			logger -i -t $unx_prog -p daemon.${level:-info} "${interface:+$interface: }$*"
		fi
	fi
}
else
	syslog debug "Running dhcpcd-hook for unit ${unx_unit}..."
fi

unx_unit_rebuild_config ()
{
	local file temp save conf sfiles bfiles mfiles
	syslog debug "Rebuilding configuration."
	conf=/etc/ntp.conf
	save="$unx_unit_dir/$(basename $conf).save"
	sfiles=$(find $unx_unit_dir -name '*_servers'   2>/dev/null)
	bfiles=$(find $unx_unit_dir -name '*_broadcast' 2>/dev/null)
	if [ -n "$bfiles$sfiles" ]; then
		if [ ! -e $save ]; then
			if [ -e $conf ]; then
				cp -pf -- $conf $save
				rm -f -- $conf
			else
				touch $save
			fi
		fi
		temp=$(mktemp "$unx_unit_dir/$(basename $conf).XXXXXX") || return
		chmod --reference=$save $temp
		chown --reference=$save $temp
		{
			cat<<-EOF
			# $conf
			#
			# $(basename $conf) -- ${unx_unit} configuration file
			#
			# Generated by ${unx_unit} hook script.
			# Any manual changes will be lost at next network event.
			#
			restrict -4		default			kod notrap nomodify nopeer noquery notrust
			restrict -6		default			kod notrap nomodify nopeer noquery notrust
			restrict 10.0.0.0	mask 255.0.0.0		nomodify noquery
			restrict 172.16.0.0	mask 255.240.0.0	nomodify noquery
			restrict 169.254.0.0	mask 255.255.0.0	nomodify noquery
			restrict 192.168.0.0	mask 255.255.0.0	nomodify noquery
			restrict 127.0.0.0	mask 255.0.0.0		nomodify noquery
			restrict 192.0.2.0	mask 255.255.255.0	ignore
			restrict 192.0.0.0	mask 255.255.255.248	ignore
			restrict 240.0.0.0	mask 240.0.0.0		ignore
			restrict 0.0.0.0	mask 255.0.0.0		ignore
			restrict 10.55.7.0	mask 255.255.255.0
			restrict 127.0.0.1
			restrict ::1
			
			driftfile /var/lib/ntp/ntp.drift
			logfile /var/log/ntp.log
			
			statsdir /var/log/ntpstats/
			
			statistics loopstats peerstats clockstats
			filegen loopstats  file loopstats  type day enable
			filegen peerstats  file peerstats  type day enable
			filegen clockstats file clockstats type day enable
			
			# server		127.127.1.0	# local clock
			fudge			127.127.1.0	stratum 10
				
			EOF
			if [ -n "$sfiles" ]; then
				cat $sfiles|awk '{if($0&&!($0 in seen)){seen[$0]=1;print$0}}'
			else
				cat<<-'EOF'
				server 0.arch.pool.ntp.org
				server 1.arch.pool.ntp.org
				server 2.arch.pool.ntp.org
				server 3.arch.pool.ntp.org
				EOF
			fi
			echo
			if [ -n "$bfiles" ]; then
				cat $bfiles|awk '{if($0&&!($0 in seen)){seen[$0]=1;print$0}}'
				cat<<-EOF
				
				# Need to block 224.0.1.1 off of external interfaces (and
				# possibly VPN interfaces) in both directions when this is
				# not commented out.  In face we should block 224.0.1.1 On
				# any interface that has a defined default route (whether
				# we are using it or not).
				#
				broadcast	224.0.1.1
				EOF
			else
				cat<<-EOF
				
				# Listens for broadcast messages an all local interfaces.
				#
				broadcastclient
				
				# Assume the broadcast delay is as specified instead of
				# attempting client/server exchanges with the broadcast
				# server.
				#
				#broadcastdelay	0.008
				EOF
			fi
			if [ -n "$mfiles" ]; then
				cat $mfiles|awk '{if($0&&!($0 in seen)){seen[$0]=1;print$0}}'
			else
				cat<<-EOF
					multicastclient	224.0.1.1
				EOF
			fi
			cat<<-'EOF'
			
			disable	auth
			enable	bclient
			
			# Need to block 224.0.1.1 off of external interfaces (and possibly
			# VPN interface) in both directions when this is not commented.
			#
			manycastclient	224.0.1.1
			
			# Need to block 224.0.1.1 off of external interfaces (and possibly
			# VPN interface) in both directions when this is not commented.
			#
			manycastserver	224.0.1.1
			EOF
		}>$temp
		if [ -e $conf ]; then
			if ! diff $temp $conf &>/dev/null; then
				cp -pf -- $temp $conf
				systemctl --no-block try-reload-or-restart $unx_unit || :
			fi
		else
			cp -pf -- $temp $conf
			systemctl --no-block --now --runtime enable ntpdate $unx_unit || :
		fi
		rm -f -- $temp
	else
		syslog debug "No defined server, shutting down"
		systemctl --no-block --now disable $unx_unit ntpdate || :
		if [ -s $save ]; then
			cp -pf -- $save $conf
		else
			rm -f -- $conf
		fi
		rm -f -- $save
	fi
}

unx_unit_remove ()
{
	local f existing=
	for f in $unx_unit_dir/${1}_*; do
		[ -e $f ] || continue
		existing=yes
		break
	done
	if [ -n "$existing" ]; then
		rm -f -- $unx_unit_dir/${1}_*
		unx_unit_rebuild_config
	fi
}

unx_unit_test_ipv4_addr ()
{
	case "$1" in
	0.*)					echo -n default		;; # 0/8
	10.41.0.*)				echo -n shared		;; # 10.41.0/24 (NM shared)
	10.55.4.*)				echo -n unxres		;; # 10.55.4/24 (Unexicon reserved)
	10.55.5.*)				echo -n pppoe		;; # 10.55.5/24 (PPPOE direct)
	10.55.6.*)				echo -n l2tp		;; # 10.55.6/24 (L2TP direct)
	10.55.7.*)				echo -n unexicon	;; # 10.55.7/24 (Unexicon VPN)
	10.*)					echo -n private		;; # 10/8
	127.*)					echo -n loopback	;; # 127.0/8
	169.254.*)				echo -n linklocal	;; # 169.254/16
	172.1[6-9].*|172.2[0-9].*|172.3[0-1].*)	echo -n private		;; # 172.16/12
	192.168.*)				echo -n private		;; # 192.168/16
	192.0.2.*)				echo -n reserved	;; # 192.0.2/24
	192.0.0.[0-7])				echo -n reserved	;; # 192.0.0/29
	22[4-9].*|23[0-9].*)			echo -n multicast	;; # 224/4 (224-239.)
	24[0-9].*|25[0-5].*)			echo -n reserved	;; # 240/4 (240-255.)
	24[0-7].*)				echo -n reserved	;; # 240/5 (240-247.)
	24[8-9].*|25[0-5].*)			echo -n reserved	;; # 248/5 (248-255.)
	*)					echo -n public		;;
	esac
}

unx_unit_add ()
{
	local address server servers
	cat /dev/null >$unx_unit_dir/${1}_servers
	cat /dev/null >$unx_unit_dir/${1}_broadcast
	servers=$(echo "$2"|sed 's/,/ /g')
	for server in $servers; do
		echo -e "server\t${server}\tburst\tprefer" >>$unx_unit_dir/${1}_servers
	done
	for address in $3; do
		case "$(unx_unit_test_ipv4_addr $address)" in
		(private)   # broadcast and multicast
			echo -e "broadcast\t${address}\tautokey\tttl 3" >>$unx_unit_dir/${1}_broadcast
			echo -e "broadcast\t240.0.1.1\tautokey\tttl 3"  >>$unx_unit_dir/${1}_broadcast
			;;
		(linklocal) # broadcast no multicast
			echo -e "broadcast\t${address}\tautokey\tttl 3" >>$unx_unit_dir/${1}_broadcast
			;;
		(public|unexicon|multicast|loopback|reserved|default|*) # skip
			continue ;;
		esac
	done
	[ -s $unx_unit_dir/${1}_servers ] || rm -f $unx_unit_dir/${1}_servers
	[ -s $unx_unit_dir/${1}_broadcast ] || rm -f $unx_unit_dir/${1}_broadcast
	unx_unit_rebuild_config
}

unx_unit_nm_add ()
{
	unx_unit_add "$1" "$DHCP4_NTP_SERVERS" "$DHCP4_BROADCAST_ADDRESS"
}

unx_unit_nm_rmv ()
{
	unx_unit_remove $@
}

unx_unit_nm_cha ()
{
	if [ -n "$DEVICE_IP_IFACE" ]; then
		unx_unit_nm_add $@
	else
		unx_unit_nm_rmv $@
	fi
}

# Network manager up command
unx_unit_nm_up ()
{
	syslog debug "Responding to NM up command."
	unx_unit_nm_add $@
}

# Network manager down command
unx_unit_nm_down ()
{
	syslog debug "Responding to NM down command."
	unx_unit_nm_rmv $@
}

# Network manager vpn-up command
unx_unit_nm_vpn_up ()
{
	syslog debug "Responding to NM vpn-up command."
	unx_unit_nm_add $@
}

# Network manager vpn-down command
unx_unit_nm_vpn_down ()
{
	syslog debug "Responding to NM vpn-down command."
	unx_unit_nm_rmv $@
}

# Network manager dhcp4-change command
unx_unit_nm_dhcp4_change ()
{
	syslog debug "Responding to NM dhcp4-change command."
	unx_unit_nm_cha $@
}

# Network manager dhcp6-change command
unx_unit_nm_dhcp6_change ()
{
	syslog debug "Responding to NM dhcp6-change command."
	unx_unit_nm_cha $@
}

# Network manager hostname command
unx_unit_nm_hostname ()
{
	syslog debug "Responding to NM hostname command."
	:
}

unx_unit_ppp_add ()
{
	unx_unit_add $@
}

unx_unit_ppp_rmv ()
{
	unx_unit_remove $@
}

# PPP daemon ip-up command
unx_unit_ppp_ip_up ()
{
	local server= broadcast=
	case "$4" in
	(10.55.7.[123]) server=; broadcast=10.55.7.255 ;;
	(10.55.6.[123]) server=; broadcast=10.55.6.255 ;;
	(10.55.5.[123]) server=; broadcast=10.55.5.255 ;;
	(10.55.4.[123]) server=; broadcast=10.55.4.255 ;;
	esac
	case "$5" in
	(10.55.7.[123]) server="$5"; broadcast=10.55.7.255 ;;
	(10.55.6.[123]) server="$5"; broadcast=10.55.6.255 ;;
	(10.55.5.[123]) server="$5"; broadcast=10.55.5.255 ;;
	(10.55.4.[123]) server="$5"; broadcast=10.55.4.255 ;;
	esac
	unx_unit_add "$1" "$server" "$broadcast"
}

# PPP daemon ip-down command
unx_unit_ppp_ip_down ()
{
	unx_unit_ppp_rmv $@
}

# PPP daemon ipv6-up command
unx_unit_ppp_ipv6_up ()
{
	:
}

# PPP daemon ipv6-down command
unx_unit_ppp_ipv6_down ()
{
	unx_unit_ppp_rmv $@
}

unx_unit_dhcp_add ()
{
	syslog debug "Responding to DHCP add command (reason: $reason)"
	unx_unit_add "$1" "$new_ntp_servers" "$new_broadcast_address"
}

unx_unit_dhcp_rmv ()
{
	syslog debug "Responding to DHCP rmv command (reason: $reason)"
	unx_unit_remove $@
}

# DHCP client daemon hook command
unx_unit_dhcpcd_hook ()
{
	syslog debug "Executing dhcpcd hook $unx_unit (reason: $reason)"
	case "$reason" in
	(PREINIT|FAIL|RECONFIGURE)
		;;
	(INFORM|INFORM6|BOUND|BOUND6|IPV4LL|STATIC|3RDPARTY|TIMEOUT)
		unx_unit_dhcp_add $interface
		;;
	(RENEW|RENEW6|REBIND|REBIND6|REBOOT|REBOOT6|CARRIER|NOCARRIER|DEPARTED)
		;;
	(EXPIRE|RELEASE|NAK)
		unx_unit_dhcp_rmv $interface
		;;
	(STOP)
		;;
	(DUMP|TEST|ROUTERADVERT)
		;;
	esac
}

# We just put this script in /etc/NetworkManager/dispatcher.d
# and then symbolic link it from /etc/ppp/ip{v6}-{up|down}.d/
# directories.  So, we decide what to do based on how we were
# called.

unx_unit_hook ()
{
	syslog debug "Dispatcher for $unx_unit invoked..."

	case "$unx_dispatcher" in
		(*/dispatcher.d/*)
			syslog debug "Invoked as dispatcher."
			case "$2" in
			(up)		unx_unit_nm_up			$@ ;;
			(down)		unx_unit_nm_down		$@ ;;
			(vpn-up)	unx_unit_nm_vpn_up		$@ ;;
			(vpn-down)	unx_unit_nm_vpn_down		$@ ;;
			(dhcp4-change)	unx_unit_nm_dhcp4_change	$@ ;;
			(dhcp6-change)	unx_unit_nm_dhcp6_change	$@ ;;
			(hostname)	unx_unit_nm_hostname		$@ ;;
			esac
			;;
		(*/ip-up.d/*)		unx_unit_ppp_ip_up		$@ ;;
		(*/ip-down.d/*)		unx_unit_ppp_ip_down		$@ ;;
		(*/ipv6-up.d/*)		unx_unit_ppp_ipv6_up		$@ ;;
		(*/ipv6-down.d/*)	unx_unit_ppp_ipv6_down		$@ ;;
		(*/dhcpcd-run-hooks)	unx_unit_dhcpcd_hook		$@ ;;
	esac

	syslog debug "...done dispatcher for ${unx_unit}."
}

unx_unit_hook $@ || :

#	CONNECTION_ID='Wired connection 2'
#	CONNECTION_UUID='877424c9-a811-4a13-9626-3170bbd40929'

#	DEVICE_IFACE='enp6s0'
#	DEVICE_IP_IFACE='enp6s0'

#	IP4_ADDRESS_0='192.168.0.16/24 192.168.0.253'
#	IP4_NAMESERVERS='192.168.0.9'
#	IP4_NUM_ADDRESSES='1'
#	IP4_NUM_ROUTES='0'

#	DHCP4_BROADCAST_ADDRESS='192.168.0.255'
#	DHCP4_DHCP_LEASE_TIME='6000'
#	DHCP4_DHCP_MESSAGE_TYPE='5'
#	DHCP4_DHCP_REBINDING_TIME='5250'
#	DHCP4_DHCP_RENEWAL_TIME='3000'
#	DHCP4_DHCP_SERVER_IDENTIFIER='192.168.0.9'
#	DHCP4_DOMAIN_NAME='pigworks.openss7.net'
#	DHCP4_DOMAIN_NAME_SERVERS='192.168.0.9'
#	DHCP4_DOMAIN_SEARCH='pigworks.openss7.net admin.openss7.net evil.openss7.net'
#	DHCP4_FORCE_HOSTNAME='yes'
#	DHCP4_HOST_NAME='habeascorpus.pigworks.openss7.net'
#	DHCP4_IF_DOWN='false'
#	DHCP4_IFFLAGS='69699'
#	DHCP4_IFMETRIC='202'
#	DHCP4_IFMTU='1500'
#	DHCP4_IF_UP='true'
#	DHCP4_IFWIRELESS='0'
#	DHCP4_INTERFACE_MTU='1500'
#	DHCP4_INTERFACE_ORDER='enp6s0'
#	DHCP4_IP_ADDRESS='192.168.0.16'
#	DHCP4_NETWORK_NUMBER='192.168.0.0'
#	DHCP4_NIS_DOMAIN='PIGWORKS'
#	DHCP4_NISPLUS_DOMAIN='PIGWORKS'
#	DHCP4_NISPLUS_SERVERS='192.168.0.9'
#	DHCP4_NIS_SERVERS='192.168.0.9'
#	DHCP4_NTP_SERVERS='192.168.0.9'
#	DHCP4_ROUTERS='192.168.0.253 192.168.0.9'
#	DHCP4_SERVER_NAME='wilbur'
#	DHCP4_SKIP_HOOKS='lookup-hostname'
#	DHCP4_SUBNET_CIDR='24'
#	DHCP4_SUBNET_MASK='255.255.255.0'
