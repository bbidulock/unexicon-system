#!/bin/bash
#
# /etc/NetworkManager/dispatcher.d/20-ospf
# /etc/ppp/ip-up.d/20-ospf.sh
# /etc/ppp/ip-down.d/20-ospf.sh
# /etc/ppp/ipv6-up.d/20-ospf.sh
# /etc/ppp/ipv6-down.d/20-ospf.sh
# /usr/lib/dhcpcd/dhcpcd-hooks/20-ospf
#
# This script is for interfaces being established by NetworkManager
# and those that are being established by PPTPD or PPPOED.  We need
# to add these interfaces to the routing daemon but we restrict them
# to having routing information for the unexicon subnetwork of
# 10.55.7.0/24 for PPTPD.  NetworkManager establishes the normal
# interfaces and PPTP or PPPOE client associations, but PPTPD and
# PPPOED establish the server associations.
#

unx_name=ospf
unx_unit=ospfd
unx_unit_dir=/run/nm-unexicon/$unx_unit
[ -d $unx_unit_dir ] || mkdir -p -- $unx_unit_dir

case "$0" in
(./*|../*|[^./]*)   unx_dispatcher="$(pwd)/$0" ;;
(*)		    unx_dispatcher="$0" ;;
esac

unx_prog=$(basename $0)
[ "$unx_prog" != 'dhcpcd-run-hooks' ] || unx_prog=dhcpcd

if [ "$unx_prog" != dhcpcd ]; then
syslog ()
{
	local level="$1"
	[ -n "$level" ] && shift
	if [ -n "$*" ]; then
		if type logger >/dev/null 2>&1; then
			logger -i -t $unx_prog -p daemon.${level:-info} "${interface:+$interface: }$*"
		fi
	fi
}
else
	syslog debug "Running dhcpcd-hook for unit ${unx_unit}..."
fi

unx_unit_rebuild_config ()
{
	local file temp save conf ifiles nfiles afiles pfiles
	syslog debug "Rebuilding configuration."
	conf=/etc/quagga/${unx_unit}.conf
	save="$unx_unit_dir/$(basename $conf).save"
	ifiles=$(find $unx_unit_dir -name '*_interface'	2>/dev/null)
	nfiles=$(find $unx_unit_dir -name '*_network'	2>/dev/null)
	afiles=$(find $unx_unit_dir -name '*_area'	2>/dev/null)
	pfiles=$(find $unx_unit_dir -name '*_passive'	2>/dev/null)
	if [ -n "$ifiles$nfiles$afiles$pfiles" ]; then
		if [ ! -e $save ]; then
			if [ -e $conf ]; then
				cp -pf -- $conf $save
				rm -f -- $conf
			else
				touch $save
				chmod 0700 $save
				chown quagga.quagga $save
			fi
		fi
		temp=$(mktemp "$unx_unit_dir/$(basename $conf).XXXXXX") || return
		chmod --reference=$save $temp
		chown --reference=$save $temp
		{
			cat<<-EOF
			! $conf
			!
			! $(basename $conf) -- ${unx_unit} configuration file
			!
			! Generated by ${unx_unit} hook script.
			! Any manual changes will be lost at next network event.
			!
			hostname ${unx_unit}
			password zebra
			enable password zebra
			!
			log syslog
			!
			EOF
			[ -z "$ifiles" ] || cat $ifiles
			cat<<-EOF
			!
			router $unx_name
			 no $unx_name router-id
			EOF
			[ -z "$nfiles" ] || cat $nfiles|awk '{if($0&&!($0 in seen)){seen[$0]=1;print$0}}'
			[ -z "$afiles" ] || cat $afiles|awk '{if($0&&!($0 in seen)){seen[$0]=1;print$0}}'
			[ -z "$pfiles" ] || cat $pfiles|awk '{if($0&&!($0 in seen)){seen[$0]=1;print$0}}'
			cat<<-'EOF'
			 redistribute kernel
			 redistribute static
			 redistribute rip
			 redistribute bgp
			 default-information originate
			!
			line vty
			 no exec-timeout
			!
			! vim: ft=uil tw=64 com=\:!!,\:! fo+=tcqlorn
			EOF
		}>$temp
		if [ -e $conf ]; then
			if ! diff $temp $conf &>/dev/null; then
				cp -pf -- $temp $conf
				systemctl --no-block try-reload-or-restart $unx_unit || :
			fi
		else
			cp -pf -- $temp $conf
			systemctl --no-block --now --runtime enable $unx_unit || :
		fi
		rm -f -- $temp
	else
		syslog debug "No defined server, shutting down"
		systemctl --no-block --now disable $unx_unit || :
		if [ -s $save ]; then
			cp -pf -- $save $conf
		else
			rm -f -- $conf
		fi
		rm -f -- $save
	fi
	systemctl daemon-reload
}

unx_unit_remove ()
{
	local f existing=
	for f in $unx_unit_dir/${1}_*; do
		[ -e $f ] || continue
		existing=yes
		break
	done
	if [ -n "$existing" ]; then
		rm -f -- $unx_unit_dir/${1}_*
		unx_unit_rebuild_config
	fi
}

unx_unit_test_ipv4_addr ()
{
	case "$1" in
	0.*)					echo -n default		;; # 0/8
	10.41.0.*)				echo -n shared		;; # 10.41.0/24 (NM shared)
	10.55.4.*)				echo -n unxres		;; # 10.55.4/24 (Unexicon reserved)
	10.55.5.*)				echo -n pppoe		;; # 10.55.5/24 (PPPOE direct)
	10.55.6.*)				echo -n l2tp		;; # 10.55.6/24 (L2TP direct)
	10.55.7.*)				echo -n unexicon	;; # 10.55.7/24 (Unexicon VPN)
	10.*)					echo -n private		;; # 10/8
	127.*)					echo -n loopback	;; # 127.0/8
	169.254.*)				echo -n linklocal	;; # 169.254/16
	172.1[6-9].*|172.2[0-9].*|172.3[0-1].*)	echo -n private		;; # 172.16/12
	192.168.*)				echo -n private		;; # 192.168/16
	192.0.2.*)				echo -n reserved	;; # 192.0.2/24
	192.0.0.[0-7])				echo -n reserved	;; # 192.0.0/29
	22[4-9].*|23[0-9].*)			echo -n multicast	;; # 224/4 (224-239.)
	24[0-9].*|25[0-5].*)			echo -n reserved	;; # 240/4 (240-255.)
	24[0-7].*)				echo -n reserved	;; # 240/5 (240-247.)
	24[8-9].*|25[0-5].*)			echo -n reserved	;; # 248/5 (248-255.)
	*)					echo -n public		;;
	esac
}

unx_unit_add ()
{
	local addr iface passive= scopes= area ntype cost
	for addr in $3; do
		scopes="${scopes:+$scopes }$(unx_unit_test_ipv4_addr $addr)"
	done
	syslog debug "Scopes are: '$scopes'"
	case " $scopes " in
	*" public "*)		iface="$2"; passive= ; cost=200 ;;
	*" unexicon "*)		iface="$2"; passive= ; cost=300 ;;
	*" l2tp "*|*" pppoe "*|*" unxres "*)
				iface="$2"; passive='no '; cost=20 ;;
	*" private "*)		iface="$2"; passive='no '; cost=100 ;;
	*" linklocal "*)	iface="$2"; passive='no '; cost=10 ;;
	*" multicast "*|*" reserved "*|*" default "*|*)
				unx_unit_remove $@; return 0 ;;
	esac
	[ $4 -eq 1 ] && passive=
	syslog debug "iface='$iface' passive='$passive' cost='$cost'"
	case "$iface" in
	tun*|ppp*) passive= ; ntype=point-to-point ;;
	*) [ -n "$5" ] && ntype=broadcast ;;
	esac
	echo "interface $iface" >$unx_unit_dir/${1}_interface
	[ -z "$cost"  ] || echo " ip $unx_name cost $cost" >>$unx_unit_dir/${1}_interface
	[ -z "$ntype" ] || echo " ip $unx_name network $ntype" >>$unx_unit_dir/${1}_interface
	[ -z "$prio"  ] || echo " ip $unx_name priority $prio" >>$unx_unit_dir/${1}_interface
	echo " ${passive}passive-interface $iface" >$unx_unit_dir/${1}_passive
	cat /dev/null >$unx_unit_dir/${1}_network
	cat /dev/null >$unx_unit_dir/${1}_area
	if [ -n "$7" ]; then
		for addr in $3; do
			subnet="$addr/$7"
			case "$(unx_unit_test_ipv4_addr $addr)" in
			public)		[ -z "$subnet" ] || echo " network $subnet area 0.0.0.0" >>$unx_unit_dir/${1}_network
					[ -z "$subnet" ] || echo " area 0.0.0.0 range $subnet" >>$unx_unit_dir/${1}_area ;;
			private)	[ -z "$subnet" ] || echo " network $subnet area 10.0.0.0" >>$unx_unit_dir/${1}_network
					[ -z "$subnet" ] || echo " area 10.0.0.0 range $subnet" >>$unx_unit_dir/${1}_area ;;
			unxres)		[ -z "$subnet" ] || echo " network $subnet area 10.55.4.0" >>$unx_unit_dir/${1}_network
					[ -z "$subnet" ] || echo " area 10.55.4.0 range $subnet" >>$unx_unit_dir/${1}_area ;;
			pppoe)		[ -z "$subnet" ] || echo " network $subnet area 10.55.5.0" >>$unx_unit_dir/${1}_network
					[ -z "$subnet" ] || echo " area 10.55.5.0 range $subnet" >>$unx_unit_dir/${1}_area ;;
			l2tp)		[ -z "$subnet" ] || echo " network $subnet area 10.55.6.0" >>$unx_unit_dir/${1}_network
					[ -z "$subnet" ] || echo " area 10.55.6.0 range $subnet" >>$unx_unit_dir/${1}_area ;;
			unexicon)	[ -z "$subnet" ] || echo " network $subnet area 10.55.7.0" >>$unx_unit_dir/${1}_network
					[ -z "$subnet" ] || echo " area 10.55.7.0 range $subnet" >>$unx_unit_dir/${1}_area ;;
			shared)		[ -z "$subnet" ] || echo " network $subnet area 10.41.0.0" >>$unx_unit_dir/${1}_network
					[ -z "$subnet" ] || echo " area 10.41.0.0 range $subnet" >>$unx_unit_dir/${1}_area ;;
			default|loopback|linklocal|reserved|multicast|*) ;;
			esac
		done
		if [ -n "$6" ]; then
			subnet="$6/$7"
			case "$(unx_unit_test_ipv4_addr $subnet)" in
			public)		echo " network $subnet area 0.0.0.0" >>$unx_unit_dir/${1}_network
					echo " area 0.0.0.0 range $subnet" >>$unx_unit_dir/${1}_area ;;
			private)	echo " network $subnet area 10.0.0.0" >>$unx_unit_dir/${1}_network
					echo " area 10.0.0.0 range $subnet" >>$unx_unit_dir/${1}_area ;;
			unxres)		echo " network $subnet area 10.55.4.0" >>$unx_unit_dir/${1}_network
					echo " area 10.55.4.0 range $subnet" >>$unx_unit_dir/${1}_area ;;
			pppoe)		echo " network $subnet area 10.55.5.0" >>$unx_unit_dir/${1}_network
					echo " area 10.55.5.0 range $subnet" >>$unx_unit_dir/${1}_area ;;
			l2tp)		echo " network $subnet area 10.55.6.0" >>$unx_unit_dir/${1}_network
					echo " area 10.55.6.0 range $subnet" >>$unx_unit_dir/${1}_area ;;
			unexicon)	echo " network $subnet area 10.55.7.0" >>$unx_unit_dir/${1}_network
					echo " area 10.55.7.0 range $subnet" >>$unx_unit_dir/${1}_area ;;
			shared)		echo " network $subnet area 10.41.0.0" >>$unx_unit_dir/${1}_network
					echo " area 10.41.0.0 range $subnet" >>$unx_unit_dir/${1}_area ;;
			default|loopback|linklocal|reserved|multicast|*) ;;
			esac
		fi
	fi
	unx_unit_rebuild_config
}

unx_unit_nm_add ()
{
	local i addr addresses=
	for ((i=0;i<IP4_NUM_ADDRESSES;i++)); do
		eval "addr=\"$IP4_ADDRESS_$i\""
		addresses="${addresses:+$addresses }$addr"
	done
	unx_unit_add "$1" "$DEVICE_IP_IFACE" "$addresses" "$DHCP4_IFWIRELESS" "$DHCP4_BROADCAST_ADDRESS" "$DHCP4_NETWORK_NUMBER" "$DHCP4_SUBNET_CIDR"
}

unx_unit_nm_rmv ()
{
	unx_unit_remove $@
}

unx_unit_nm_cha ()
{
	if [ -n "$DEVICE_IP_IFACE" ]; then
		unx_unit_nm_add $@
	else
		unx_unit_nm_rmv $@
	fi
}

# Network manager up command
unx_unit_nm_up ()
{
	syslog debug "Responding to NM up command."
	unx_unit_nm_add $@
}

# Network manager down command
unx_unit_nm_down ()
{
	syslog debug "Responding to NM down command."
	unx_unit_nm_rmv $@
}

# Network manager vpn-up command
unx_unit_nm_vpn_up ()
{
	syslog debug "Responding to NM vpn-up command."
	unx_unit_nm_add $@
}

# Network manager vpn-down command
unx_unit_nm_vpn_down ()
{
	syslog debug "Responding to NM vpn-down command."
	unx_unit_nm_rmv $@
}

# Network manager dhcp4-change command
unx_unit_nm_dhcp4_change ()
{
	syslog debug "Responding to NM dhcp4-change command."
	unx_unit_nm_cha $@
}

# Network manager dhcp6-change command
unx_unit_nm_dhcp6_change ()
{
	syslog debug "Responding to NM dhcp6-change command."
	unx_unit_nm_cha $@
}

# Network manager hostname command
unx_unit_nm_hostname ()
{
	syslog debug "Responding to NM hostname command."
	:
}

unx_unit_ppp_add ()
{
	unx_unit_add $@
}

unx_unit_ppp_rmv ()
{
	unx_unit_remove $@
}

# PPP daemon ip-up command
unx_unit_ppp_ip_up ()
{
	local wireless=0 broadcast= number= cidr=
	case "$4" in
	(10.55.7.[123]) broadcast=10.55.7.255; number=10.55.7.0; cidr=24 ;;
	(10.55.6.[123]) broadcast=10.55.6.255; number=10.55.6.0; cidr=24 ;;
	(10.55.5.[123]) broadcast=10.55.5.255; number=10.55.5.0; cidr=24 ;;
	(10.55.4.[123]) broadcast=10.55.4.255; number=10.55.4.0; cidr=24 ;;
	esac
	case "$5" in
	(10.55.7.[123]) broadcast=10.55.7.255; number=10.55.7.0; cidr=24 ;;
	(10.55.6.[123]) broadcast=10.55.6.255; number=10.55.6.0; cidr=24 ;;
	(10.55.5.[123]) broadcast=10.55.5.255; number=10.55.5.0; cidr=24 ;;
	(10.55.4.[123]) broadcast=10.55.4.255; number=10.55.4.0; cidr=24 ;;
	esac
	unx_unit_ppp_add "$1" "$1" "$4" "$wireless" "$broadcast" "$number" "$cidr"
}

# PPP daemon ip-down command
unx_unit_ppp_ip_down ()
{
	unx_unit_ppp_rmv $@
}

# PPP daemon ipv6-up command
unx_unit_ppp_ipv6_up ()
{
	unx_unit_ppp_add "$1" "$1" "$4" "0" "" "" ""
}

# PPP daemon ipv6-down command
unx_unit_ppp_ipv6_down ()
{
	unx_unit_ppp_rmv $@
}

unx_unit_dhcp_add ()
{
	syslog debug "Responding to DHCP add command (reason: $reason)"
	unx_unit_add "$1" "$1" "$new_ip_address" "$ifwireless" "$new_broadcast_address" "$network_number" "$subnet_cidr"
}

unx_unit_dhcp_rmv ()
{
	syslog debug "Responding to DHCP rmv command (reason: $reason)"
	unx_unit_remove $@
}

# DHCP client daemon hook command
unx_unit_dhcpcd_hook ()
{
	syslog debug "Executing dhcpcd hook $unx_unit (reason: $reason)"
	case "$reason" in
	(PREINIT|FAIL|RECONFIGURE)
		;;
	(INFORM|INFORM6|BOUND|BOUND6|IPV4LL|STATIC|3RDPARTY|TIMEOUT)
		unx_unit_dhcp_add $interface
		;;
	(RENEW|RENEW6|REBIND|REBIND6|REBOOT|REBOOT6|CARRIER|NOCARRIER|DEPARTED)
		;;
	(EXPIRE|RELEASE|NAK)
		unx_unit_dhcp_rmv $interface
		;;
	(STOP)
		;;
	(DUMP|TEST|ROUTERADVERT)
		;;
	esac
}

# We just put this script in /etc/NetworkManager/dispatcher.d
# and then symbolic link it from /etc/ppp/ip{v6}-{up|down}.d/
# directories.  So, we decide what to do based on how we were
# called.

unx_unit_hook ()
{
	syslog debug "Dispatcher for $unx_unit invoked..."

	case "$unx_dispatcher" in
		(*/dispatcher.d/*)
			syslog debug "Invoked as dispatcher."
			case "$2" in
			(up)		unx_unit_nm_up			$@ ;;
			(down)		unx_unit_nm_down		$@ ;;
			(vpn-up)	unx_unit_nm_vpn_up		$@ ;;
			(vpn-down)	unx_unit_nm_vpn_down		$@ ;;
			(dhcp4-change)	unx_unit_nm_dhcp4_change	$@ ;;
			(dhcp6-change)	unx_unit_nm_dhcp6_change	$@ ;;
			(hostname)	unx_unit_nm_hostname		$@ ;;
			esac
			;;
		(*/ip-up.d/*)		unx_unit_ppp_ip_up		$@ ;;
		(*/ip-down.d/*)		unx_unit_ppp_ip_down		$@ ;;
		(*/ipv6-up.d/*)		unx_unit_ppp_ipv6_up		$@ ;;
		(*/ipv6-down.d/*)	unx_unit_ppp_ipv6_down		$@ ;;
		(*/dhcpcd-run-hooks)	unx_unit_dhcpcd_hook		$@ ;;
	esac

	syslog debug "...done dispatcher for ${unx_unit}."
}

unx_unit_hook $@ || :

